<template>
  <div>
  <el-container>
    <el-aside width="250px">
      <h2>Devices</h2>
      <li v-for="(deviceName, key) in deviceNames">
        <el-button style="width: 100%" v-on:click="showRecommendDevices(key)">{{ deviceName.replace(">","") }}</el-button>
      </li>
      <h2>Communications</h2>
      <li v-for="(communicationName, key) in communicationNames">
        <el-button style="width: 100%">{{ communicationName.replace(">","") }}</el-button>
      </li>
    </el-aside>
    <el-main>
      <li v-for="(list, key) in lists">{{list}}</li>
    </el-main>
  </el-container>
  </div>
</template>

<script>
import fs from 'fs'
import util from 'util'
import parser from 'xml2json-light'

export default {
  data () {
    return {
      deviceNames: [],
      communicationNames: [],
      recommendDevices: [],
      recommendCommunications: [],
      recommendSoftware: [],
      lists: []
    }
  },
  
  methods: {
    showRecommendDevices: function(key) {
      this.lists = Object.entries(this.recommendDevices[key].recommendList.recommendDeviceList.recommendDevice).map(recommendDevice => recommendDevice.name);
      console.log(Object.entries(this.recommendDevices[key].recommendList.recommendDeviceList.recommendDevice));
    }
  },
  
  mounted() {
    const directoryPath = 'C:/Users/ma17123/source/repos/syuuron/syuuron/XML/RecommendationResult/';
    
    const getFilePaths = async (directroyPath) =>  {
      return await util.promisify(fs.readdir)(directoryPath)
                       .then(Pathlist => Pathlist.map(path => directoryPath + path));
    }
    
    const getFunctionInformationListFormOfJson = async (directoryPath) => {
      const filePaths  = await getFilePaths(directoryPath);
      for(const filePath in filePaths) {
          const fileDataOfXml = await util.promisify(fs.readFile)(filePaths[filePath], {encoding : 'utf8'})
          const fileDataOfJson = parser.xml2json(fileDataOfXml);
          const fileDataType = fileDataOfJson.recommendList.type;
          switch(fileDataType) {
            case "device": 
              this.recommendDevices.push(fileDataOfJson);
              this.deviceNames.push(fileDataOfJson.recommendList.targetDeviceName);
              break;
            case "communication": 
              this.recommendCommunications.push(fileDataOfJson);
              this.communicationNames.push(fileDataOfJson.recommendList.targetCommunicationName);
              break;
            case "node": 
              this.RecommendSoftware.push(fileDataOfJson);
              break;
          }
      }
      console.table(this.recommendDevices);
      console.table(this.recommendCommunications);
    };
    
    getFunctionInformationListFormOfJson(directoryPath);
    
    (async (directoryPath) => {
      const filePaths  = await getFilePaths(directoryPath);
      filePaths.forEach((filePath, key) => {
        const self = this;
        fs.watch(filePath, async() => {
          await getFunctionInformationListFormOfJson(directoryPath);
          if(key == self.currentFunctionNumber) {
            self.drawChart(self.currentFunctionNumber);
          }
        });
      });
    })();
    
  },
    
}
</script>

<suyle>
</style>
